namespace SoftUniRestaurant.Common
{
    using System;

    public static class Validator
    {
        public static void ThrowIfNullOrWhitespace(string str, string message = null)
        {
            if (string.IsNullOrWhiteSpace(str))
            {
                throw new ArgumentException(message);
            }
        }

        public static void ThrowIfZeroOrNegative(decimal number, string message = null)
        {
            if (number <= 0)
            {
                throw new ArgumentException(message);
            }
        }
    }
}


*******************************************


namespace SoftUniRestaurant.Core
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using SoftUniRestaurant.Factories;
    using SoftUniRestaurant.Factories.Contracts;
    using SoftUniRestaurant.Models.Drinks.Contracts;
    using SoftUniRestaurant.Models.Foods.Contracts;
    using SoftUniRestaurant.Models.Tables.Contracts;

    public class RestaurantController
    {
        private IList<IFood> foods;
        private IList<IDrink> drinks;
        private IList<ITable> tables;

        private IFoodFactory foodFactory;
        private IDrinkFactory drinkFactory;
        private ITableFactory tableFactory;

        private decimal totalIncome;

        public RestaurantController()
        {
            this.foods = new List<IFood>();
            this.drinks = new List<IDrink>();
            this.tables = new List<ITable>();

            this.foodFactory = new FoodFactory();
            this.drinkFactory = new DrinkFactory();
            this.tableFactory = new TableFactory();

            this.totalIncome = 0;
        }

        public string AddFood(string type, string name, decimal price)
        {
            IFood food = this.foodFactory.CreateFood(type, name, price);

            this.foods.Add(food);
            return $"Added {name} ({type}) with price {price:F2} to the pool";
        }

        public string AddDrink(string type, string name, int servingSize, string brand)
        {
            IDrink drink = this.drinkFactory.CreateDrink(type, name, servingSize, brand);

            this.drinks.Add(drink);
            return $"Added {name} ({brand}) to the drink pool";
        }

        public string AddTable(string type, int tableNumber, int capacity)
        {
            ITable table = this.tableFactory.CreateTable(type, tableNumber, capacity);

            this.tables.Add(table);
            return $"Added table number {tableNumber} in the restaurant";
        }

        public string ReserveTable(int numberOfPeople)
        {
            ITable table = this.tables.FirstOrDefault(t => !t.IsReserved
            && t.Capacity >= numberOfPeople);

            if (table == null)
            {
                return $"No available table for {numberOfPeople} people";
            }

            table.Reserve(numberOfPeople);
            return $"Table {table.TableNumber} has been reserved for {numberOfPeople} people";
        }

        public string OrderFood(int tableNumber, string foodName)
        {
            ITable table = this.tables.FirstOrDefault(t => t.TableNumber == tableNumber);

            if (table == null)
            {
                return $"Could not find table with {tableNumber}";
            }

            IFood food = this.foods.FirstOrDefault(f => f.Name == foodName);

            if (food == null)
            {
                return $"No {foodName} in the menu";
            }

            table.OrderFood(food);
            return $"Table {tableNumber} ordered {foodName}";
        }

        public string OrderDrink(int tableNumber, string drinkName, string drinkBrand)
        {
            ITable table = this.tables.FirstOrDefault(t => t.TableNumber == tableNumber);

            if (table == null)
            {
                return $"Could not find table with {tableNumber}";
            }

            IDrink drink = this.drinks.FirstOrDefault(d => d.Name == drinkName && d.Brand == drinkBrand);

            if (drink == null)
            {
                return $"There is no {drinkName} {drinkBrand} available";
            }

            table.OrderDrink(drink);
            return $"Table {tableNumber} ordered {drinkName} {drinkBrand}";
        }

        public string LeaveTable(int tableNumber)
        {
            ITable table = this.tables.FirstOrDefault(t => t.TableNumber == tableNumber);

            decimal bill = table.GetBill();
            this.totalIncome += bill;
            table.Clear();

            return $"Table: {tableNumber}" + Environment.NewLine + $"Bill: {bill:f2}";
        }

        public string GetFreeTablesInfo()
        {
            StringBuilder result = new StringBuilder();

            foreach (ITable table in this.tables.Where(t => !t.IsReserved))
            {
                result.AppendLine(table.GetFreeTableInfo());
            }

            return result.ToString().TrimEnd();
        }

        public string GetOccupiedTablesInfo()
        {
            StringBuilder result = new StringBuilder();

            foreach (ITable table in this.tables.Where(t => t.IsReserved))
            {
                result.AppendLine(table.GetOccupiedTableInfo());
            }

            return result.ToString().TrimEnd();
        }

        public string GetSummary()
        {
            return $"Total income: {totalIncome:f2}lv";
        }
    }
}




****************************************

namespace SoftUniRestaurant.Factories
{
    using System;
    using System.Linq;
    using System.Reflection;
    using SoftUniRestaurant.Factories.Contracts;
    using SoftUniRestaurant.Models.Drinks.Contracts;

    public class DrinkFactory : IDrinkFactory
    {
        public IDrink CreateDrink(string type, string name, int servingSize, string brand)
        {
            Type drinkType = Assembly
                .GetCallingAssembly()
                .GetTypes()
                .FirstOrDefault(t => t.Name == type);

            IDrink drink = (IDrink)Activator.CreateInstance(drinkType, name, servingSize, brand);

            return drink;
        }
    }
}


*******************************


namespace SoftUniRestaurant.Factories
{
    using System;
    using System.Linq;
    using System.Reflection;
    using SoftUniRestaurant.Factories.Contracts;
    using SoftUniRestaurant.Models.Foods.Contracts;

    public class FoodFactory : IFoodFactory
    {
        public IFood CreateFood(string type, string name, decimal price)
        {
            Type foodType = Assembly.GetCallingAssembly()
                .GetTypes()
                .FirstOrDefault(t => t.Name == type);

            IFood food = (IFood)Activator.CreateInstance(foodType, name, price);

            return food;
        }
    }
}



**********************************



namespace SoftUniRestaurant.Factories
{
    using System;
    using System.Linq;
    using System.Reflection;
    using SoftUniRestaurant.Factories.Contracts;
    using SoftUniRestaurant.Models.Tables.Contracts;

    public class TableFactory : ITableFactory
    {
        public ITable CreateTable(string type, int tableNumber, int capacity)
        {
            Type tableType = Assembly
                .GetCallingAssembly()
                .GetTypes()
                .FirstOrDefault(t => t.Name == type + "Table");

            ITable table = (ITable)Activator.CreateInstance(tableType, tableNumber, capacity);

            return table;
        }
    }
}



*********************************



namespace SoftUniRestaurant.Factories.Contracts
{
    using SoftUniRestaurant.Models.Drinks.Contracts;

    public interface IDrinkFactory
    {
        IDrink CreateDrink(string type, string name, int servingSize, string brand);
    }
}



***********************************


namespace SoftUniRestaurant.Factories.Contracts
{
    using SoftUniRestaurant.Models.Foods.Contracts;

    public interface IFoodFactory
    {
        IFood CreateFood(string type, string name, decimal price);
    }
}



*************************************



namespace SoftUniRestaurant.Factories.Contracts
{
    using SoftUniRestaurant.Models.Tables.Contracts;

    public interface ITableFactory
    {
        ITable CreateTable(string type, int tableNumber, int capacity);
    }
}



****************************************



namespace SoftUniRestaurant.Models.Drinks
{
    public class Alcohol : Drink
    {
        private const decimal AlcoholPrice = 3.50m;

        public Alcohol(string name, int servingSize, string brand) 
            : base(name, servingSize, AlcoholPrice, brand)
        {
        }
    }
}


***************************


namespace SoftUniRestaurant.Models.Drinks
{
    using SoftUniRestaurant.Common;
    using SoftUniRestaurant.Models.Drinks.Contracts;

    public abstract class Drink : IDrink
    {
        private string name;
        private int servingSize;
        private decimal price;
        private string brand;

        public Drink(string name, int servingSize, decimal price, string brand)
        {
            this.Name = name;
            this.ServingSize = servingSize;
            this.Price = price;
            this.Brand = brand;
        }

        public string Name
        {
            get
            {
                return this.name;
            }
            private set
            {
                Validator.ThrowIfNullOrWhitespace(
                    value,
                    "Name cannot be null or white space!");

                this.name = value;
            }
        }

        public int ServingSize
        {
            get
            {
                return this.servingSize;
            }
            private set
            {
                Validator.ThrowIfZeroOrNegative(
                    value, 
                    "Serving size cannot be less or equal to zero");

                this.servingSize = value;
            }
        }

        public decimal Price
        {
            get
            {
                return this.price;
            }
            private set
            {
                Validator.ThrowIfZeroOrNegative(
                    value, 
                    "Price cannot be less or equal to zero");

                this.price = value;
            }
        }

        public string Brand
        {
            get
            {
                return this.brand;
            }
            private set
            {
                Validator.ThrowIfNullOrWhitespace(
                    value,
                    "Brand cannot be null or white space!");

                this.brand = value;
            }
        }

        public override string ToString()
        {
            return $"{this.Name} {this.Brand} - {this.ServingSize}ml - {this.Price:F2}lv";
        }
    }
}



********************************


namespace SoftUniRestaurant.Models.Drinks
{
    public class FuzzyDrink : Drink
    {
        private const decimal FuzzyDrinkPrice = 2.50m;

        public FuzzyDrink(string name, int servingSize, string brand) 
            : base(name, servingSize, FuzzyDrinkPrice, brand)
        {
        }
    }
}


********************************


namespace SoftUniRestaurant.Models.Drinks
{
    public class Juice : Drink
    {
        private const decimal JuicePrice = 1.80m;

        public Juice(string name, int servingSize, string brand) 
            : base(name, servingSize, JuicePrice, brand)
        {
        }
    }
}


**********************************


namespace SoftUniRestaurant.Models.Drinks
{
    public class Water : Drink
    {
        private const decimal WaterPrice = 1.50m;

        public Water(string name, int servingSize, string brand) 
            : base(name, servingSize, WaterPrice, brand)
        {
        }
    }
}


************************************


namespace SoftUniRestaurant.Models.Drinks.Contracts
{
    public interface IDrink
    {
        string Name { get; }

        int ServingSize { get; }

        decimal Price { get; }

        string Brand { get; }
    }
}


*************************************


namespace SoftUniRestaurant.Models.Foods
{
    public class Dessert : Food
    {
        private const int InitialServingSize = 200;

        public Dessert(string name, decimal price) 
            : base(name, InitialServingSize, price)
        {
        }
    }
}


***********************************


namespace SoftUniRestaurant.Models.Foods
{
    using SoftUniRestaurant.Common;
    using SoftUniRestaurant.Models.Foods.Contracts;

    public abstract class Food : IFood
    {
        private string name;
        private int servingSize;
        private decimal price;

        public Food(string name, int servingSize, decimal price)
        {
            this.Name = name;
            this.ServingSize = servingSize;
            this.Price = price;
        }

        public string Name
        {
            get
            {
                return this.name;
            }
            private set
            {
                Validator.ThrowIfNullOrWhitespace(
                    value, 
                    "Name cannot be null or white space!");

                this.name = value;
            }
        }
        
        public int ServingSize
        {
            get
            {
                return this.servingSize;
            }
            private set
            {
                Validator.ThrowIfZeroOrNegative(
                    value, 
                    "Serving size cannot be less or equal to zero");

                this.servingSize = value;
            }
        }

        public decimal Price
        {
            get
            {
                return this.price;
            }
            private set
            {
                Validator.ThrowIfZeroOrNegative(
                    value, 
                    "Price cannot be less or equal to zero!");

                this.price = value;
            }
        }

        public override string ToString()
        {
            return $"{this.Name}: {this.ServingSize}g - {this.Price:F2}";
        }
    }
}


****************************


namespace SoftUniRestaurant.Models.Foods
{
    public class MainCourse : Food
    {
        private const int InitialServingSize = 500;

        public MainCourse(string name, decimal price) 
            : base(name, InitialServingSize, price)
        {
        }
    }
}


***********************************


namespace SoftUniRestaurant.Models.Foods
{
    public class Salad : Food
    {
        private const int InitialServingSize = 300;

        public Salad(string name, decimal price) 
            : base(name, InitialServingSize, price)
        {
        }
    }
}


**************************************


namespace SoftUniRestaurant.Models.Foods
{
    public class Soup : Food
    {
        private const int InitialServingSize = 245;

        public Soup(string name, decimal price) 
            : base(name, InitialServingSize, price)
        {
        }
    }
}


***************************************


namespace SoftUniRestaurant.Models.Foods.Contracts
{
    public interface IFood
    {
        string Name { get; }

        int ServingSize { get; }

        decimal Price { get; }        
    }
}


*****************************************


namespace SoftUniRestaurant.Models.Tables
{
    public class InsideTable : Table
    {
        private const decimal InitialPricePerPerson = 2.50m;

        public InsideTable(int tableNumber, int capacity) 
            : base(tableNumber, capacity, InitialPricePerPerson)
        {
        }
    }
}


*************************************


namespace SoftUniRestaurant.Models.Tables
{
    public class OutsideTable : Table
    {
        private const decimal InitialPricePerPerson = 3.50m;

        public OutsideTable(int tableNumber, int capacity) 
            : base(tableNumber, capacity, InitialPricePerPerson)
        {
        }
    }
}


**************************************


namespace SoftUniRestaurant.Models.Tables
{
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using SoftUniRestaurant.Common;
    using SoftUniRestaurant.Models.Drinks.Contracts;
    using SoftUniRestaurant.Models.Foods.Contracts;
    using SoftUniRestaurant.Models.Tables.Contracts;

    public abstract class Table : ITable
    {
        private IList<IFood> foodOrders;
        private IList<IDrink> drinkOrders;
        private int capacity;
        private int numberOfPeople;
        private decimal pricePerPerson;

        private Table()
        {
            this.foodOrders = new List<IFood>();
            this.drinkOrders = new List<IDrink>();
        }

        public Table(int tableNumber, int capacity, decimal pricePerPerson)
            : this()
        {
            this.TableNumber = tableNumber;
            this.Capacity = capacity;
            this.pricePerPerson = pricePerPerson;
        }

        public int TableNumber { get; }

        public int Capacity
        {
            get
            {
                return this.capacity;
            }
            private set
            {
                Validator.ThrowIfZeroOrNegative(
                    value,
                    "Capacity has to be greater than 0");

                this.capacity = value;
            }
        }

        public int NumberOfPeople
        {
            get
            {
                return this.numberOfPeople;
            }
            private set
            {
                Validator.ThrowIfZeroOrNegative(
                    value, 
                    "Cannot place zero or less people!");

                this.numberOfPeople = value;
            }
        }

        public bool IsReserved { get; private set; }

        public decimal Price =>
            this.foodOrders.Sum(f => f.Price) +
            this.drinkOrders.Sum(d => d.Price) +
            this.NumberOfPeople * this.pricePerPerson;

        public void Clear()
        {
            this.drinkOrders.Clear();
            this.foodOrders.Clear();

            this.numberOfPeople = 0;
            this.IsReserved = false;
        }

        public decimal GetBill()
        {
            return this.Price;
        }

        public string GetFreeTableInfo()
        {
            StringBuilder result = new StringBuilder();

            result.AppendLine($"Table: {this.TableNumber}");
            result.AppendLine($"Type: {this.GetType().Name}");
            result.AppendLine($"Capacity: {this.Capacity}");
            result.AppendLine($"Price per Person: {this.pricePerPerson:F2}");

            return result.ToString().TrimEnd();
        }

        public string GetOccupiedTableInfo()
        {
            StringBuilder result = new StringBuilder();

            result.AppendLine($"Table: {this.TableNumber}");
            result.AppendLine($"Type: {this.GetType().Name}");
            result.AppendLine($"Number of people: {this.NumberOfPeople}");

            string foodOrders = this.foodOrders.Count == 0 ? "None" : this.foodOrders.Count.ToString();
            string drinkOrders = this.drinkOrders.Count == 0 ? "None" : this.drinkOrders.Count.ToString();

            result.AppendLine($"Food orders: {foodOrders}");

            foreach (IFood food in this.foodOrders)
            {
                result.AppendLine(food.ToString());
            }

            result.AppendLine($"Drink orders: {drinkOrders}");

            foreach (IDrink drink in this.drinkOrders)
            {
                result.AppendLine(drink.ToString());
            }

            return result.ToString().TrimEnd();
        }

        public void OrderDrink(IDrink drink)
        {
            this.drinkOrders.Add(drink);
        }

        public void OrderFood(IFood food)
        {
            this.foodOrders.Add(food);
        }

        public void Reserve(int numberOfPeople)
        {
            this.NumberOfPeople = numberOfPeople;

            this.IsReserved = true;
        }
    }
}


**************************************


namespace SoftUniRestaurant.Models.Tables.Contracts
{
    using SoftUniRestaurant.Models.Drinks.Contracts;
    using SoftUniRestaurant.Models.Foods.Contracts;

    public interface ITable
    {
        int TableNumber { get; }

        int Capacity { get; }

        int NumberOfPeople { get; }

        bool IsReserved { get; }

        decimal Price { get; }

        void Reserve(int numberOfPeople);

        void OrderFood(IFood food);

        void OrderDrink(IDrink drink);

        decimal GetBill();

        void Clear();

        string GetFreeTableInfo();

        string GetOccupiedTableInfo();
    }
}


*********************************


namespace SoftUniRestaurant
{
    public class StartUp
    {
        public static void Main()
        {
        }
    }
}


**********************************






